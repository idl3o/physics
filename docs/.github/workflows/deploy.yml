name: Deploy Reality Protocol Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better build optimization

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: docs

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
        with:
          static_site_generator: jekyll

      - name: Install dependencies
        working-directory: docs
        run: |
          # Install Node.js dependencies for build tools
          if [ -f package.json ]; then
            npm ci
          fi
          
          # Install Ruby dependencies for Jekyll
          if [ -f Gemfile ]; then
            bundle install
          fi

      - name: Optimize assets
        working-directory: docs
        run: |
          # Optimize CSS
          if [ -f assets/css/main.css ]; then
            echo "Optimizing CSS..."
            # Add CSS minification if needed
          fi
          
          # Optimize JavaScript
          if [ -f assets/js/main.js ]; then
            echo "Optimizing JavaScript..."
            # Add JS minification if needed
          fi
          
          # Optimize images (if any)
          echo "Checking for images to optimize..."
          find assets/images -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" 2>/dev/null | head -5

      - name: Validate HTML structure
        working-directory: docs
        run: |
          echo "Validating HTML structure..."
          # Check for required meta tags
          if grep -q 'name="description"' index.html; then
            echo "✓ Description meta tag found"
          else
            echo "⚠ Description meta tag missing"
          fi
          
          # Check for accessibility features
          if grep -q 'aria-' index.html; then
            echo "✓ ARIA attributes found"
          else
            echo "⚠ Consider adding ARIA attributes for accessibility"
          fi

      - name: Build with Jekyll
        working-directory: docs
        run: |
          # Build the site
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Validate generated site
        working-directory: docs
        run: |
          echo "Validating generated site..."
          
          # Check if critical files exist
          if [ -f "_site/index.html" ]; then
            echo "✓ Index page generated"
          else
            echo "✗ Index page missing"
            exit 1
          fi
          
          # Check if CSS is included
          if [ -f "_site/assets/css/main.css" ]; then
            echo "✓ Main CSS found"
          else
            echo "⚠ Main CSS missing"
          fi
          
          # Check if JavaScript is included
          if [ -f "_site/assets/js/main.js" ]; then
            echo "✓ Main JavaScript found"
          else
            echo "⚠ Main JavaScript missing"
          fi
          
          # Check for documentation pages
          DOC_COUNT=$(find _site -name "*.html" | wc -l)
          echo "✓ Generated $DOC_COUNT HTML pages"
          
          if [ $DOC_COUNT -lt 10 ]; then
            echo "⚠ Low page count, check if all documentation is being processed"
          fi

      - name: Test links and performance
        working-directory: docs
        run: |
          echo "Running basic tests..."
          
          # Test for broken internal links (basic check)
          echo "Checking for common link issues..."
          if grep -r 'href="[^"]*\.md"' _site/ 2>/dev/null; then
            echo "⚠ Found .md links that should be .html"
          fi
          
          # Check for missing images
          if grep -r 'src="[^"]*\.\(png\|jpg\|jpeg\|gif\|svg\)"' _site/ | grep -v 'assets/' 2>/dev/null; then
            echo "⚠ Found image references that might be missing"
          fi
          
          # Basic file size check
          TOTAL_SIZE=$(du -sh _site | cut -f1)
          echo "✓ Total site size: $TOTAL_SIZE"

      - name: Generate deployment report
        working-directory: docs
        run: |
          echo "## 🚀 Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Site statistics
          PAGE_COUNT=$(find _site -name "*.html" | wc -l)
          CSS_COUNT=$(find _site -name "*.css" | wc -l)
          JS_COUNT=$(find _site -name "*.js" | wc -l)
          TOTAL_SIZE=$(du -sh _site | cut -f1)
          
          echo "### 📊 Site Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **HTML Pages**: $PAGE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **CSS Files**: $CSS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **JavaScript Files**: $JS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Key features
          echo "### ✨ Key Features Included" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Interactive visualizations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Responsive design" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Search functionality" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Accessibility features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance optimization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment info
          echo "### 🌐 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
      - name: Deployment success notification
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Reality Protocol documentation has been successfully deployed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Site**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom Domain**: https://docs.reality-protocol.org (if configured)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Quick Tests" >> $GITHUB_STEP_SUMMARY
          echo "Please verify the following after deployment:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Homepage loads correctly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Navigation works properly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Search functionality is operational" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Interactive visualizations display" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Mobile responsiveness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Ready to explore infinite dimensions!* 🌌"

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed"
            exit 1
          fi